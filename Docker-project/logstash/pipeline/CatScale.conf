input {

  file {
    path => [ "/logs/*/*-authorized-keys.txt" ]
    start_position => beginning
    tags => "authorized_keys"
    sincedb_path => "/dev/null"
  }

 file {
   path => [ "/logs/*/*-processes.txt" ]
   start_position => beginning
  tags => "processes"
 }
file {
   path => [ "/logs/*/*processhashes.txt" ]
   start_position => beginning
  tags => "processhashes"
 }

file {
  path => [ "/logs/*/*-netstat.txt" ]
  start_position => beginning
  tags => "netstat"
}

file {
  path => [ "/logs/*/*-netstat.txt" ]
  start_position => beginning
  codec => multiline {
      pattern => "^#"
      negate => "true"
      what => "previous"
      max_lines => 15000
      auto_flush_interval => 5
  }
 tags => "full-netstat"
}

file {
  path => [ "/logs/*/*-persistence-shellrc-*.txt"]
  start_position => beginning
  codec => multiline {
      pattern => "^#" 
      negate => "true"
      what => "previous"
      max_lines => 15000
      auto_flush_interval => 5
  }
     tags => ["persistence-rc"]
}

file {
  path => [ "/logs/*/bash_history/**/bash_history"]
    start_position => beginning
    codec => multiline {
      pattern => "^#"
      negate => "true"
      what => "previous"
      max_lines => 10000
      auto_flush_interval => 5
      }
  tags => ["full-bash_history"]
  }

file {
  path => [ "/logs/*/bash_history/**/bash_history"]
    start_position => beginning
    tags => ["bash_history"]
  }

 file { 
   path => [ "/logs/*/*-lastlog.txt"]
   start_position => beginning
   codec => multiline {
       pattern => "^#"
       negate => "true"
       what => "previous"
       max_lines => 500
       auto_flush_interval => 5
     }
   tags => ["full-lastlog"]
 }

file {
  path => [ "/logs/*/*-lastbad.txt"]
  start_position => beginning
  codec => multiline {
      pattern => "^#"
      negate => "true"
      what => "previous"
      max_lines => 5000
      auto_flush_interval => 5
    }
  tags => ["full-lastbad"]
}
  file {
  path => [ "/logs/*/*-ifconfig.txt"]
  start_position => beginning
  codec => multiline {
      pattern => "^#"
      negate => "true"
      what => "previous"
      max_lines => 100
      auto_flush_interval => 5
    }
  tags => ["ifconfig"]
}
file {
  path => [ "/logs/*/*-dhcp.txt"]
  start_position => beginning
  codec => multiline {
      pattern => "^*"
      negate => "true"
      what => "previous"
      max_lines => 200
      auto_flush_interval => 5
    }
  tags => ["dhcp"]
}
 file{
     path => [ "/logs/*/*-passwd.txt"]
     start_position => beginning
      codec => multiline {
         pattern => "^#"
         negate => "true"
         what => "previous"
         max_lines => 100
         auto_flush_interval => 5
    }
  tags => ["passwd"]
 }

 file{
     path => [ "/logs/*/*-group.txt"]
     start_position => beginning
      codec => multiline {
         pattern => "^#"
         negate => "true"
         what => "previous"
         max_lines => 100
         auto_flush_interval => 5
    }
  tags => ["group"]

 }
  file{
     path => [ "/logs/*/*-sudoers.txt"]
     start_position => beginning
      codec => multiline {
         pattern => "^#"
         negate => "true"
         what => "previous"
         max_lines => 100
         auto_flush_interval => 5
    }
  tags => ["sudoers"]

 }

    file{
     path => [ "/logs/*/*-known-hosts.txt"]
     start_position => beginning
      codec => multiline {
         pattern => "^#"
         negate => "true"
         what => "previous"
         max_lines => 100
         auto_flush_interval => 5
    }
  tags => ["known-hosts"]

 }

    file{
     path => [ "/logs/*/*-hosts.allow.txt"]
     start_position => beginning
      codec => multiline {
         pattern => "^*"
         negate => "false"
         what => "previous"
         max_lines => 100
         auto_flush_interval => 5
    }
  tags => ["hosts-allow"]

 }

    file{
     path => [ "/logs/*/*-hosts.deny.txt"]
     start_position => beginning
      codec => multiline {
         pattern => "^*"
         negate => "false"
         what => "previous"
         max_lines => 100
         auto_flush_interval => 5
    }
  tags => ["hosts-deny"]

 }
     file{
     path => [ "/logs/*/*-hosts.txt"]
     start_position => beginning
      codec => multiline {
         pattern => "^*"
         negate => "false"
         what => "previous"
         max_lines => 100
         auto_flush_interval => 5
    }
  tags => ["hosts"]

 }
    file{
     path => [ "/logs/*/*-release.txt"]
     start_position => beginning
      codec => multiline {
         pattern => "^#"
         negate => "true"
         what => "previous"
         max_lines => 100
         auto_flush_interval => 5
    }
  tags => ["release"]

 }
     file{
     path => [ "/logs/*/*-ssh_config.txt"]
     start_position => beginning
      codec => multiline {
         pattern => "^*"
         negate => "false"
         what => "previous"
         max_lines => 200
         auto_flush_interval => 5
    }
  tags => ["ssh_config"]

 }
      file{
     path => [ "/logs/*/*-sshd_config.txt"]
     start_position => beginning
      codec => multiline {
         pattern => "^*"
         negate => "false"
         what => "previous"
         max_lines => 200
         auto_flush_interval => 5
    }
  tags => ["sshd_config"]

 }
       file{
     path => [ "/logs/*/*-iptables.txt"]
     start_position => beginning
      codec => multiline {
         pattern => "^#"
         negate => "true"
         what => "previous"
         max_lines => 200
         auto_flush_interval => 5
    }
  tags => ["iptables"]

 }
       file{
     path => [ "/logs/*/*-lsusb.txt"]
     start_position => beginning
      codec => multiline {
         pattern => "^#"
         negate => "true"
         what => "previous"
         max_lines => 200
         auto_flush_interval => 5
    }
  tags => ["lsusb"]

 }

  file {
    path => [ "/logs/*/varlogs/message*" ]
    tags => ["varlog-messages"]
    start_position => "beginning"
  }
  file {
    path => [ "/logs/*/varlogs/auth*" ]
    tags => ["varlog-auth"]
    start_position => "beginning"
  }

  file {
    path => [ "/logs/*/varlogs/syslog*" ]
    tags => ["varlog-syslog"]
    start_position => "beginning"
  }
  file {
    path => [ "/logs/*/varlogs/apache*/*" ]
    tags => ["varlog-apache"]
    start_position => "beginning"
  }

  file {
    path => [ "/logs/*/packages-result.txt" ]
    tags => ["exec_packages"]
    start_position => "beginning"
  }
  file {
    path => [ "/logs/*/varlogs/secur*" ]
    tags => ["varlog-secure"]
    start_position => "beginning"
  }
  file {
    path => [ "/logs/*/varlogs/cron*" ]
    tags => ["varlog-cron"]
    start_position => "beginning"
  }
  file {
    path => [ "/logs/*/varlogs/httpd/*" ]
    tags => ["varlog-httpd"]
    start_position => "beginning"
  }
  file {
    path => [ "/logs/*/varlogs/audit*" ]
    tags => ["varlog-audit"]
    start_position => "beginning"
  }
  file{
     path => [ "/logs/*/viminfo/home/*/viminfo"]
     start_position => beginning
      codec => multiline {
         pattern => "^#"
         negate => "true"
         what => "previous"
         max_lines => 200
         auto_flush_interval => 5
    }
  tags => ["snap-viminfo"]

}
}

filter {

 if "authorized_keys" in [tags] {
   grok {
     break_on_match => false
     match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-authorized-keys.txt"}
     add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
     patterns_dir => ["/usr/share/logstash/pipeline/patterns/authorized_keys"]
     match => { "message" => "%{MAIN}" }
        }
    
    date{
     match => ["datetime", "dd MM yyy HH:mm"]
   }
 }
 else if "full-netstat" in [tags] {
   grok {
     break_on_match => false 
     match => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-netstat.txt"}
     match => {"message" => "%{GREEDYDATA:message}"}
     add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
   }
   date{
     match => ["datetime", "dd MM yyy HH:mm"]
   }
 }
  
  else if "netstat" in [tags] {
    grok {
      break_on_match => false
     # match => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-netstat.txt"}
     # add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
      match => { "message" => "(?<transport_protocol>(?:tcp(?:6?)|udp(?:6?)|raw(?:6?)))\s+(?<recv_q>%{BASE10NUM})\s+(?<send_q>%{BASE10NUM})\s+(?<local_address>%{IP}):(?<local_port>(?:%{POSINT}|\*))\s+(?<remote_address>%{IP}):(?<remote_port>(?:%{POSINT}|\*))\s+(?<state>(?:LISTEN|ESTABLISHED|TIME_WAIT|CLOSE_WAIT|%{BASE10NUM})?)\s+(?<timer>(?:on|off|timewait|keepalive))\s+(?<timer_stats>\(%{BASE10NUM}/%{BASE10NUM}/%{BASE10NUM}\))"}
      #patterns_dir => ["/usr/share/logstash/pipeline/patterns/netstat"]
      #match => { "message" => "%{MAIN}" }
    }
    date{
     match => ["datetime", "dd MM yyy HH:mm"]
   }
   	geoip {
		source => "remote_address"
	  }
  }
  else if "processhashes" in [tags] {
    grok {
      break_on_match => false
      match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-processeshashes.txt"}
      add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
      match => {"message" => "%{BASE16NUM:md5sum}%{SPACE}%{UNIXPATH:filepath}"}
    }
    date{
     match => ["datetime", "dd MM yyy HH:mm"]
   }
   }
  else if "processes-full" in [tags] {
    grok {
      break_on_match => false
      match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-processes.txt"}
      match => {"message" => "%{GREEDYDATA:message}"}
         }
  }
  else if "processes" in [tags] {
    grok {
      break_on_match => false
      match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-processes.txt"}
      add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
      match => {"message" => "%{USERNAME}%{SPACE}%{INT:PID}%{SPACE}%{NUMBER:CPU}%{SPACE}%{NUMBER:MEM}%{SPACE}%{INT:vsz}%{SPACE}%{INT:rss}%{SPACE}%{NOTSPACE:TTY}%{SPACE}%{WORD:stat}%{SPACE}%{HOUR}:%{MINUTE}%{SPACE}%{NOTSPACE}%{SPACE}%{PATH:program}%{GREEDYDATA:arguments}"}
         }
    date{
     match => ["datetime", "dd MM yyy HH:mm"]
   }
  }
  else if "persistence-rc" in [tags] {
    grok {
      patterns_dir => ["/usr/share/logstash/pipeline/patterns/persistence-rc"]
      match => { "message" => "%{MAIN}" }
    }
  }

  if "full-bash_history" in [tags] {
    grok {
      break_on_match => false
      match  => {"path" => "/logs/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}/bash_history/{%GREEDYDATA:Username}*"} 
      add_field => ["User", "%{Username}"]
      add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
      match => {"message" => "%{GREEDYDATA}"}    
#        }
  }
  }
  else if "bash_history" in [tags] {
    grok {
      break_on_match => false
      match  => {"path" => "/logs/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}/bash_history/{%GREEDYDATA:Username}*"} 
      add_field => ["User", "%{Username}"]
      add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
#     patterns_dir => ["/usr/share/logstash/pipeline/patterns/bash_hist"]
        #"message" => "%{MAIN}"
        #match => {"message" => "%{BASE10NUM:execution_time}%{GREEDYDATA:command}"}
      match => {"message" => "%{GREEDYDATA}"}    
#        }
  }
  }
  else if "lastlog" in [tags] {
    grok {
      break_on_match => false
      match => { "message" => "%{GREEDYDATA}" }
      match  => {"path" => "%{GREEDYDATA:path}/%{GREEDYDATA:Hostname}-%{GREEDYDATA:date}-%{GREEDYDATA:time}-lastlog.txt"}
      }
  }

    else if "full-lastbad" in [tags] {
    grok {
      break_on_match => false
#      match  => {"path" => "%{GREEDYDATA:path}/%{GREEDYDATA:Hostname}-%{GREEDYDATA:date}-%{GREEDYDATA:time}-*.txt"}
      match => { "message" => "%{GREEDYDATA}" }
    }
   }

  else if "varlog-syslog" in [tags] {
    grok {
    match => [ "message", "%{SYSLOGLINE}" ]
    overwrite => [ "message" ]
    }
    date {
    match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
    }

  }
  else if "varlog-apache" in [tags] {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
      overwrite => [ "message" ]
      add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
    }
    date {
         match => ["datetime", "dd MM yyy HH:mm"]
  }
  }
else if "varlog-auth" in [tags] {
    grok {
    match => [ "message", "%{SYSLOGBASE} %{GREEDYDATA:message}" ]
    overwrite => [ "message" ]
    }
    date {
    match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss" ]
    }

    if [program] == "sshd" {
	    grok {
    patterns_dir => ["/usr/share/logstash/pipeline/patterns"]
		#patterns_dir   => "${LL_PATTERN_DIR:/etc/logstash/patterns.d}"
		match => { "message" => "%{SSH_AUTHFAIL_WRONGCREDS}" }
		add_field => { "ssh_authresult" => "fail" "ssh_failreason" => "wrong_credentials" }
		add_tag => [ "_grok_sshd_success", "matched" ]
	    }
	    grok {
    patterns_dir => ["/usr/share/logstash/pipeline/patterns"]
		match => { "message" => "%{SSH_AUTHFAIL_WRONGUSER}" }
		add_field => { "ssh_authresult" => "fail" "ssh_failreason" => "unknown_user" }
		add_tag => [ "_grok_sshd_success", "matched" ]
	    }
	    grok {
    patterns_dir => ["/usr/share/logstash/pipeline/patterns"]
		match => { "message" => "%{SSH_AUTH_SUCCESS}" }
		add_field => { "ssh_authresult" => "success" }
		add_tag => [ "_grok_sshd_success", "matched" ]
	    }
	    grok {
    patterns_dir => ["/usr/share/logstash/pipeline/patterns"]
		match => { "message" => "%{SSH_DISCONNECT}" }
		add_tag => [ "_grok_sshd_success", "matched", "ssh_disconnect" ]
	    }
	    mutate {
		remove_tag => [ "matched", "_grokparsefailure" ]
	    }
	    geoip {
		source => "ssh_client_ip"
	    }
	}
  }

  else if "ifconfig" in [tags] {
    grok{
        break_on_match => false
        match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-ifconfig.txt"}
        add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        match  => {"message" => "%{GREEDYDATA}" }
       }
   date{
     match => ["datetime", "dd MM yyy HH:mm"]
   }
  }
    else if "dhcp" in [tags] {
    grok{
        break_on_match => false
        match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-dhcp.txt"}
        add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        match  => {"message" => "%{GREEDYDATA}" }
       }
   date{
     match => ["datetime", "dd MM yyy HH:mm"]
   }
  }
  else if "passwd" in [tags] {
    grok{
        break_on_match => false
        match  => {"message" => "%{GREEDYDATA}" }
        match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-passwd.txt"}
        add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        #match  => {"path" => "%{GREEDYDATA:path}/%{GREEDYDATA:Hostname}-%{GREEDYDATA:date}-%{GREEDYDATA:time}-passwd.txt"}
       }
    date{
     match => ["datetime", "dd MM yyy HH:mm"]
   }
  }
 else if "group" in [tags] {
   grok{
       break_on_match => false
       match  => {"message" => "%{GREEDYDATA}" }
       match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-group.txt"}
       add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
      }
 
  date{
   match => ["datetime", "dd MM yyy HH:mm"] 
 }
 }
 else if "sudoers" in [tags] {
   grok{
       break_on_match => false
       match  => {"message" => "%{GREEDYDATA}" }
       match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-sudoers.txt"}
       add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
      }
   date{
    match => ["datetime", "dd MM yyy HH:mm"]
  }
 }
 else if "known-hosts" in [tags] {
   grok{
       break_on_match => false
       match  => {"message" => "%{GREEDYDATA}" }
       match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-known-hosts.txt"}
       add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        }
   date{
    match => ["datetime", "dd MM yyy HH:mm"]
  }
}
 else if "hosts-allow" in [tags] {
   grok{
       break_on_match => false
       match  => {"message" => "%{GREEDYDATA}" }
       match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-hosts.allow.txt"}
       add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        }
   date{
    match => ["datetime", "dd MM yyy HH:mm"]
  }
}
 else if "hosts-deny" in [tags] {
   grok{
       break_on_match => false
       match  => {"message" => "%{GREEDYDATA}" }
       match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-hosts.deny.txt"}
       add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        }
   date{
    match => ["datetime", "dd MM yyy HH:mm"]
  }
}
 else if "hosts" in [tags] {
   grok{
       break_on_match => false
       match  => {"message" => "%{GREEDYDATA}" }
       match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-hosts.txt"}
       add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        }
   date{
    match => ["datetime", "dd MM yyy HH:mm"]
  }
}
 else if "release" in [tags] {
   grok{
       break_on_match => false
       match  => {"message" => "%{GREEDYDATA}" }
       match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-release.txt"}
       add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        }
   date{
    match => ["datetime", "dd MM yyy HH:mm"]
  }
}
 else if "ssh_config" in [tags] {
   grok{
       break_on_match => false
       match  => {"message" => "%{GREEDYDATA}" }
       match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-ssh_config.txt"}
       add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        }
   date{
    match => ["datetime", "dd MM yyy HH:mm"]
  }
}
 else if "sshd_config" in [tags] {
   grok{
       break_on_match => false
       match  => {"message" => "%{GREEDYDATA}" }
       match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-sshd_config.txt"}
       add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        }
   date{
    match => ["datetime", "dd MM yyy HH:mm"]
  }
}
 else if "iptables" in [tags] {
   grok{
       break_on_match => false
       match  => {"message" => "%{GREEDYDATA}" }
       match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-iptables.txt"}
       add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        }
    date{
     match => ["datetime", "dd MM yyy HH:mm"]
   }
}
 else if "lsusb" in [tags] {
   grok{
       break_on_match => false
       match  => {"message" => "%{GREEDYDATA}" }
       match  => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:Hostname}-%{YEAR:Year}%{MONTHNUM:Month}%{MONTHDAY:Day}-%{HOUR:Hour}%{MINUTE:Minute}-lsusb.txt"}
       add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        }
    date{
     match => ["datetime", "dd MM yyy HH:mm"]
   }
}

 else if "viminfo" in [tags] {
   grok{
       break_on_match => false
       match  => {"message" => "%{GREEDYDATA}" }
       #match  => {"path" => "%{GREEDYDATA:path}"}
       #add_field => ["datetime", "%{Day} %{Month} %{Year} %{Hour}:%{Minute}"]
        }
#   date{
#    match => ["datetime", "dd MM yyy HH:mm"]
#  }
}

}

output {

  if "_grokparsefailure" in [tags] {
    # write events that didn't match to a file
   file  { path => "/logs/debug/grok_failures.txt" }
  }

  else if "authorized_keys" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "snap-authorized_keys"
		}
    }
   else if "full-netstat" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "snap-full-netstat"
                  }
  }

 
  else if "netstat" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "snap-netstat"
		  }
  }
  else if "processhashes" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "snap-process-hashes"
      }
  }
  else if "processes-full" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "snap-processes-full"
      }
  }
  else if "processes" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "snap-processes"
      }
  }
 
  else if "persistence-rc" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "snap-persistence-rc"
    }
  }

  else if "full-bash_history" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "snap-full-bash_history"
    }
  }

  else if "bash_history" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "snap-bash_history"
    }
  }

  else if "full-lastlog" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "full-lastlog"
    }
  }
  else if "lastlog" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "snap-lastlog"
    }
  }
  else if "full-lastbad" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "snap-full-lastbad"
    }
  }
  else if "lastbad" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "snap-lastbad"
    }
  }

  else if "varlog-messages" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "varlog-messages"
      }
  }
  else if "exec_packages" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-exec_packages"
      }
  }
  else if "varlog-secure" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "varlog-secure"
      }
  }
  
    else if "ifconfig" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-ifconfig"
      }
   }
    else if "dhcp" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-dhcp"
      }
   }
  else if "passwd" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-passwd"
      }
   }
  else if "group" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-group"
      }
   }
  else if "sudoers" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-sudoers"
      }
   }
  else if "known-hosts" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-known-hosts"
      }
   }
  else if "hosts-allow" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-hosts-allow"
      }
   }
  else if "hosts-deny" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-hosts-deny"
      }
   }
  else if "hosts" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-hosts"
      }
   }

    else if "release" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-release"
      }
   }
    else if "ssh_config" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-ssh-config"
      }
   }
    else if "sshd_config" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-sshd-config"
      }
   }
    else if "iptables" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-iptables"
      }
   }
    else if "lsusb" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-lsusb"
      }
   }
  else if "viminfo" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "snap-viminfo"
      }
   }
  else if "varlog-auth" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "varlog-auth"
      }
   }
  else if "varlog-syslog" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "varlog-syslog"
      }
   }
  else if "varlog-apache" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      index => "varlog-apache"
    }
  }
     else if "timline-bin-dir" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "timeline-bin-dir"
      }
   }


#stdout { codec => rubydebug }
}


